##########


#create, update and delete post.



# Import form .views


##################################


>>> import json 
>>> from blog.models import Post
>>> with open('posts.json') as f:
... post_json = json.load(f) 
  File "<console>", line 2
    post_json = json.load(f)
    ^^^^^^^^^
IndentationError: expected an indented block after 'with' statement on line 1
>>> posts_json = json.load(f) 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'f' is not defined
>>> with open('posts.json') as f:
... posts_json = json.load(f)     
  File "<console>", line 2
    posts_json = json.load(f)
    ^^^^^^^^^^
IndentationError: expected an indented block after 'with' statement on line 1
>>>
>>> data_json = json.load(f)      
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'f' is not defined
>>> with open('data.json') as f:  
... data_json = json.load(f)     
  File "<console>", line 2
    data_json = json.load(f)
    ^^^^^^^^^
IndentationError: expected an indented block after 'with' statement on line 1
>>> with open('posts.json') as f:
...  posts_json = json.load(f)    
...
Traceback (most recent call last):
  File "<console>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'posts.json'
>>> with open('data.json') as f:  
... posts_json = json.load(f)    
  File "<console>", line 2
    posts_json = json.load(f)
    ^^^^^^^^^^
IndentationError: expected an indented block after 'with' statement on line 1
>>> with open('posts.json') as f:
...     posts_json = json.load(f) 
...
Traceback (most recent call last):
  File "<console>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'posts.json'
>>> with open('data.json') as f:  
...     posts_json = json.load(f) 
...
>>> for post in posts_json:
...     post = Post(title= post['title'], content=post['content'],author_id=post['']) 
...
Traceback (most recent call last):
  File "<console>", line 2, in <module>
KeyError: ''
>>> for post in posts_json:                                 
...     post = Post(title= post['title'], content=post['content'],author_id=post['user_id'])
...     post.save()
...
>>> from django.core.paginator import Paginator 
>>> post =['1','2','3','4','5'] 
>>> p = Paginator(post,2) 
>>> p.num_pages
3
>>> for page in p.page_range:
...     print(page) 
...
1
2
3
>>> p1 = p.page(1)
>>>
>>> p1
<Page 1 of 3>
>>> p1.number
1
>>> p1.object_list
['1', '2']
>>> p1.has_previous()
False
>>> p1.has_next()
True
>>> p1.next_page_number()
2